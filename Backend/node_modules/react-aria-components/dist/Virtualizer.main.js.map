{"mappings":"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","sources":["packages/react-aria-components/src/Virtualizer.tsx"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionRenderer, CollectionRendererContext} from './Collection';\nimport {DropPosition, DropTarget, DropTargetDelegate, ItemDropTarget, Node} from '@react-types/shared';\nimport {Layout, ReusableView, useVirtualizerState, VirtualizerState} from '@react-stately/virtualizer';\nimport React, {createContext, ReactElement, ReactNode, useContext, useMemo} from 'react';\nimport {useScrollView, VirtualizerItem} from '@react-aria/virtualizer';\n\ntype View = ReusableView<Node<unknown>, ReactNode>;\n\nexport interface LayoutOptionsDelegate<O> {\n  useLayoutOptions?(): O\n}\n\ninterface ILayout<O> extends Layout<Node<unknown>, O>, Partial<DropTargetDelegate>, LayoutOptionsDelegate<O> {}\n\nexport interface VirtualizerProps {\n  /** The child collection to virtualize (e.g. ListBox, GridList, or Table). */\n  children: ReactNode,\n  /** The layout object that determines the position and size of the visible elements. */\n  layout: ILayout<any>\n}\n\nconst VirtualizerContext = createContext<VirtualizerState<any, any> | null>(null);\n\nexport function Virtualizer(props: VirtualizerProps) {\n  let {children, layout} = props;\n  let renderer: CollectionRenderer = useMemo(() => ({\n    isVirtualized: true,\n    layoutDelegate: layout,\n    dropTargetDelegate: layout.getDropTargetFromPoint ? layout as DropTargetDelegate : undefined,\n    CollectionRoot({collection, persistedKeys, scrollRef, renderDropIndicator}) {\n      let layoutOptions = layout.useLayoutOptions?.();\n      let state = useVirtualizerState({\n        layout,\n        collection,\n        renderView: (type, item) => {\n          return item?.render?.(item);\n        },\n        onVisibleRectChange(rect) {\n          let element = scrollRef?.current;\n          if (element) {\n            element.scrollLeft = rect.x;\n            element.scrollTop = rect.y;\n          }\n        },\n        persistedKeys,\n        layoutOptions\n      });\n\n      let {contentProps} = useScrollView({\n        onVisibleRectChange: state.setVisibleRect,\n        contentSize: state.contentSize,\n        onScrollStart: state.startScrolling,\n        onScrollEnd: state.endScrolling\n      }, scrollRef!);\n\n      if (state.contentSize.area === 0) {\n        return null;\n      }\n\n      return (\n        <div {...contentProps}>\n          <VirtualizerContext.Provider value={state}>\n            {renderChildren(null, state.visibleViews, renderDropIndicator)}\n          </VirtualizerContext.Provider>\n        </div>\n      );\n    },\n    CollectionBranch({parent, renderDropIndicator}) {\n      let virtualizer = useContext(VirtualizerContext);\n      let parentView = virtualizer!.virtualizer.getVisibleView(parent.key)!;\n      return renderChildren(parentView, Array.from(parentView.children), renderDropIndicator);\n    }\n  }), [layout]);\n\n  return (\n    <CollectionRendererContext.Provider value={renderer}>\n      {children}\n    </CollectionRendererContext.Provider>\n  );\n}\n\nfunction renderChildren(parent: View | null, children: View[], renderDropIndicator?: (target: ItemDropTarget) => ReactNode) {\n  return children.map(view => renderWrapper(parent, view, renderDropIndicator));\n}\n\nfunction renderWrapper(\n  parent: View | null,\n  reusableView: View,\n  renderDropIndicator?: (target: ItemDropTarget) => ReactNode\n): ReactElement {\n  let rendered = (\n    <VirtualizerItem\n      key={reusableView.key}\n      layoutInfo={reusableView.layoutInfo!}\n      virtualizer={reusableView.virtualizer}\n      parent={parent?.layoutInfo}>\n      {reusableView.rendered}\n    </VirtualizerItem>\n  );\n\n  let {collection, layout} = reusableView.virtualizer;\n  let {key, type} = reusableView.content;\n  if (type === 'item' && renderDropIndicator && layout.getDropTargetLayoutInfo) {\n    rendered = (\n      <React.Fragment key={reusableView.key}>\n        {renderDropIndicatorWrapper(parent, reusableView, 'before', renderDropIndicator)}\n        {rendered}\n        {collection.getKeyAfter(key) == null && renderDropIndicatorWrapper(parent, reusableView, 'after', renderDropIndicator)}\n      </React.Fragment>\n    );\n  }\n\n  return rendered;\n}\n\nfunction renderDropIndicatorWrapper(\n  parent: View | null,\n  reusableView: View,\n  dropPosition: DropPosition,\n  renderDropIndicator: (target: ItemDropTarget) => ReactNode\n) {\n  let target: DropTarget = {type: 'item', key: reusableView.content.key, dropPosition};\n  let indicator = renderDropIndicator(target);\n  if (indicator) {\n    let layoutInfo = reusableView.virtualizer.layout.getDropTargetLayoutInfo!(target);\n    indicator = (\n      <VirtualizerItem\n        layoutInfo={layoutInfo}\n        virtualizer={reusableView.virtualizer}\n        parent={parent?.layoutInfo}>\n        {indicator}\n      </VirtualizerItem>\n    );\n  }\n  \n  return indicator;\n}\n"],"names":[],"version":3,"file":"Virtualizer.main.js.map"}